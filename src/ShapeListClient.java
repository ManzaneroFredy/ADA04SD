//import java.rmi.*;import java.rmi.registry.LocateRegistry;import java.rmi.registry.Registry;import java.rmi.RemoteException;import java.util.Vector;import java.awt.Rectangle;import java.awt.Color;import java.util.Scanner;public class ShapeListClient {    public static void main(String args[]) {        String option = "Read";        String shapeType = "Rectangle";        System.setProperty("java.security.policy", "policy.txt");        /*if(System.getSecurityManager() == null){        	System.setSecurityManager(new RMISecurityManager());        }         else            System.out.println("Already has a security manager, so cant set RMI SM");         ShapeList aShapeList = null; */        try {            //ShapeList aShapeList  = (ShapeList) Naming.lookup("//localhost/ShapeList");            // Obtener el registro RMI            Registry registry = LocateRegistry.getRegistry("localhost", 1999);            // Registry registry = LocateRegistry.getRegistry("localhost", 1199);            // Buscar el objeto remoto por su nombre en el registro RMI            ShapeList aShapeList = (ShapeList) registry.lookup("ShapeList");            System.out.println("Found server");            //Crear algunos objetos            GraphicalObject g = new GraphicalObject(shapeType,                    new Rectangle(50, 50, 300, 400), Color.blue,                    Color.blue, false);            System.out.println("Created graphical object");            //Llamado remoto para agregar             aShapeList.newShape(g);            g = new GraphicalObject(shapeType,                    new Rectangle(50, 50, 100, 100), Color.red,                    Color.red, true);            System.out.println("Created graphical object");            //Llamado remoto para agregar                          aShapeList.newShape(g);            System.out.println("Stored X shapes");            Vector sList = aShapeList.allShapes();            System.out.println("Got vector");            int lv = aShapeList.getVersion();            System.out.println("List version: " + lv);            for (int i = 0; i < sList.size(); i++) {                g = ((Shape) sList.elementAt(i)).getAllState();                g.print();                int sv = ((Shape) sList.elementAt(i)).getVersion();                System.out.println("Shape version: " + sv);            }        } catch (RemoteException e) {            System.out.println("allShapes: " + e.getMessage());        } catch (Exception e) {            System.out.println("Lookup: " + e.getMessage());        }    }    public void menu() {        Scanner sc = new Scanner(System.in);        int response = 1;        while (response > 0 && response < 4) {            System.out.println("Menu de opciones para el cliente de Formas(Shapes)");            System.out.println("Ingrese la opción que quiera realizar");            System.out.println("1. Añadir un objeto Shape");            System.out.println("2. Listar elementos");            System.out.println("3. Eliminar un elemento");            System.out.println("4. Salirse del programa");            response = sc.nextInt();            if (response > 0 && response < 4) {                switch (response) {                    case 1: {                        System.out.println("Selecciono la opción 1:");                        int x = sc.nextInt();                        int y = sc.nextInt();                        int width = sc.nextInt();                        int height = sc.nextInt();                        generateShape(x, y, width, height);                        aShapeList.newShape(g);                        System.out.println("Stored X shapes");                        break;                    }                    case 2: {                        Vector sList = aShapeList.allShapes();                        System.out.println("Got vector");                        int lv = aShapeList.getVersion();                        System.out.println("List version: " + lv);                        for (int i = 0; i < sList.size(); i++) {                            g = ((Shape) sList.elementAt(i)).getAllState();                            g.print();                            int sv = ((Shape) sList.elementAt(i)).getVersion();                            System.out.println("Shape version: " + sv);                        }                        break;                    }                    case 3: {                        System.out.println("3. Eliminar un elemento");                        int version = sc.nextInt();                        ShapeListImp(version);                        break;                    }                    case 4: {                        //Finishes Java Program                        System.exit(0);                        break;                    }                    default:                        System.out.println("-----------");                        break;                }            }        }    }    public void generateShape(int x, int y, int width, int height) {        String shapeType = "Rectangle";        //Crear algunos objetos        GraphicalObject g = new GraphicalObject(shapeType,                new Rectangle(x, y, width, height), Color.blue,                Color.blue, false);    }}